{
  "version": 3,
  "sources": [
    "../../../src/components/Toolbar/index.tsx"
  ],
  "names": [
    "React",
    "Fragment",
    "useContext",
    "useEffect",
    "EditorContext",
    "Child",
    "ToolbarItems",
    "props",
    "prefixCls",
    "fullscreen",
    "preview",
    "barPopup",
    "commandOrchestrator",
    "dispatch",
    "handleClick",
    "command",
    "name",
    "state",
    "keyCommand",
    "value",
    "commands",
    "forEach",
    "item",
    "groupName",
    "parent",
    "Object",
    "keys",
    "keyName",
    "length",
    "executeCommand",
    "document",
    "body",
    "style",
    "overflow",
    "map",
    "idx",
    "liProps",
    "activeBtn",
    "childNode",
    "children",
    "getState",
    "textApi",
    "undefined",
    "close",
    "execute",
    "disabled",
    "test",
    "buttonProps",
    "icon",
    "createElement",
    "type",
    "onClick",
    "evn",
    "stopPropagation",
    "Array",
    "isArray",
    "Toolbar",
    "height",
    "isChild",
    "extraCommands"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { Fragment, useContext, useEffect } from 'react';\nimport { IProps } from '../../utils';\nimport { EditorContext, PreviewType, ContextStore } from '../../Context';\nimport { ICommand } from '../../commands';\nimport Child from './Child';\nimport './index.less';\n\nexport interface IToolbarProps extends IProps {\n  height?: React.CSSProperties['height'];\n  onCommand?: (command: ICommand<string>, groupName?: string) => void;\n  commands?: ICommand<string>[];\n  isChild?: boolean;\n}\n\nexport function ToolbarItems(props: IToolbarProps) {\n  const { prefixCls } = props;\n  const { fullscreen, preview, barPopup = {}, commandOrchestrator, dispatch } = useContext(EditorContext);\n  function handleClick(command: ICommand<string>, name?: string) {\n    if (!dispatch) return;\n    const state: ContextStore = { barPopup: { ...barPopup } };\n    if (command.keyCommand === 'preview') {\n      state.preview = command.value as PreviewType;\n    }\n    if (command.keyCommand === 'fullscreen') {\n      state.fullscreen = !fullscreen;\n    }\n    if (props.commands && command.keyCommand === 'group') {\n      props.commands.forEach((item) => {\n        if (name === item.groupName) {\n          state.barPopup![name!] = true;\n        } else if (item.keyCommand) {\n          state.barPopup![item.groupName!] = false;\n        }\n      });\n    } else if (name || command.parent) {\n      Object.keys(state.barPopup || {}).forEach((keyName) => {\n        state.barPopup![keyName] = false;\n      });\n    }\n\n    if (Object.keys(state).length) {\n      dispatch({ ...state });\n    }\n    commandOrchestrator && commandOrchestrator.executeCommand(command);\n  }\n\n  useEffect(() => {\n    if (document) {\n      document.body.style.overflow = !fullscreen ? 'initial' : 'hidden';\n    }\n  }, [fullscreen]);\n\n  return (\n    <ul>\n      {(props.commands || []).map((item, idx) => {\n        if (item.keyCommand === 'divider') {\n          return <li key={idx} {...item.liProps} className={`${prefixCls}-toolbar-divider`} />;\n        }\n        if (!item.keyCommand) return <Fragment />;\n        const activeBtn =\n          (fullscreen && item.keyCommand === 'fullscreen') || (item.keyCommand === 'preview' && preview === item.value);\n        const childNode =\n          item.children && typeof item.children === 'function'\n            ? item.children({\n                getState: () => commandOrchestrator!.getState(),\n                textApi: commandOrchestrator ? commandOrchestrator!.textApi : undefined,\n                close: () => handleClick({}, item.groupName),\n                execute: () => handleClick({ execute: item.execute }),\n              })\n            : undefined;\n        const disabled = barPopup && preview && preview === 'preview' && !/(preview|fullscreen)/.test(item.keyCommand);\n        return (\n          <li key={idx} {...item.liProps} className={activeBtn ? `active` : ''}>\n            {!item.buttonProps && item.icon}\n            {item.buttonProps &&\n              React.createElement(\n                'button',\n                {\n                  type: 'button',\n                  disabled,\n                  'data-name': item.name,\n                  ...item.buttonProps,\n                  onClick: (evn: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                    evn.stopPropagation();\n                    handleClick(item, item.groupName);\n                  },\n                },\n                item.icon,\n              )}\n            {item.children && (\n              <Child\n                groupName={item.groupName}\n                prefixCls={prefixCls}\n                children={childNode}\n                commands={Array.isArray(item.children) ? item.children : undefined}\n              />\n            )}\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default function Toolbar(props: IToolbarProps = {}) {\n  const { prefixCls, height = 29, isChild } = props;\n  const { commands, extraCommands } = useContext(EditorContext);\n  return (\n    <div className={`${prefixCls}-toolbar`} style={{ height }}>\n      <ToolbarItems {...props} commands={props.commands || commands || []} />\n      {!isChild && <ToolbarItems {...props} commands={extraCommands || []} />}\n    </div>\n  );\n}\n"
  ]
}