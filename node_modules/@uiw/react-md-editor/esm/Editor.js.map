{
  "version": 3,
  "sources": [
    "../src/Editor.tsx"
  ],
  "names": [
    "React",
    "useEffect",
    "useReducer",
    "useMemo",
    "useRef",
    "useImperativeHandle",
    "MarkdownPreview",
    "TextArea",
    "Toolbar",
    "DragBar",
    "getCommands",
    "getExtraCommands",
    "reducer",
    "EditorContext",
    "setGroupPopFalse",
    "data",
    "Object",
    "keys",
    "forEach",
    "keyname",
    "InternalMDEditor",
    "props",
    "ref",
    "prefixCls",
    "className",
    "propsValue",
    "value",
    "commands",
    "extraCommands",
    "height",
    "toolbarHeight",
    "enableScroll",
    "visiableDragbar",
    "highlightEnable",
    "preview",
    "previewType",
    "fullscreen",
    "previewOptions",
    "textareaProps",
    "maxHeight",
    "minHeight",
    "autoFocus",
    "tabSize",
    "onChange",
    "hideToolbar",
    "renderTextarea",
    "other",
    "markdown",
    "scrollTop",
    "scrollTopPreview",
    "barPopup",
    "state",
    "dispatch",
    "container",
    "previewRef",
    "enableScrollRef",
    "current",
    "stateInit",
    "undefined",
    "cls",
    "filter",
    "Boolean",
    "join",
    "trim",
    "textareaDomRef",
    "active",
    "initScroll",
    "textareaWarp",
    "addEventListener",
    "handleScroll",
    "e",
    "type",
    "textareaDom",
    "previewDom",
    "mdp",
    "scale",
    "scrollHeight",
    "offsetHeight",
    "target",
    "style",
    "Number",
    "test",
    "newHeight",
    "mdEditor",
    "forwardRef",
    "Markdown"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import React, { useEffect, useReducer, useMemo, useRef, useImperativeHandle } from 'react';\nimport MarkdownPreview, { MarkdownPreviewProps, MarkdownPreviewRef } from '@uiw/react-markdown-preview';\nimport { IProps } from './utils';\nimport TextArea, { ITextAreaProps } from './components/TextArea';\nimport Toolbar from './components/Toolbar';\nimport DragBar from './components/DragBar';\nimport { getCommands, getExtraCommands, ICommand } from './commands';\nimport { reducer, EditorContext, ContextStore, PreviewType } from './Context';\nimport './index.less';\n\nexport interface MDEditorProps extends Omit<React.HTMLAttributes<HTMLDivElement>, 'onChange'>, IProps {\n  /**\n   * The Markdown value.\n   */\n  value?: string;\n  /**\n   * Event handler for the `onChange` event.\n   */\n  onChange?: (value?: string) => void;\n  /**\n   * Can be used to make `Markdown Editor` focus itself on initialization. Defaults to on.\n   * it will be set to true when either the source `textarea` is focused,\n   * or it has an `autofocus` attribute and no other element is focused.\n   */\n  autoFocus?: ITextAreaProps['autoFocus'];\n  /**\n   * The height of the editor.\n   */\n  height?: number;\n  /**\n   * Custom toolbar heigth\n   * @default 29px\n   */\n  toolbarHeight?: number;\n  /**\n   * Show drag and drop tool. Set the height of the editor.\n   */\n  visiableDragbar?: boolean;\n  /**\n   * Show markdown preview.\n   */\n  preview?: PreviewType;\n  /**\n   * Full screen display editor.\n   */\n  fullscreen?: boolean;\n  /**\n   * Maximum drag height. `visiableDragbar=true`\n   */\n  maxHeight?: number;\n  /**\n   * Minimum drag height. `visiableDragbar=true`\n   */\n  minHeight?: number;\n  /**\n   * This is reset [react-markdown](https://github.com/rexxars/react-markdown) settings.\n   */\n  previewOptions?: Omit<MarkdownPreviewProps, 'source'>;\n  /**\n   * Set the `textarea` related props.\n   */\n  textareaProps?: ITextAreaProps;\n  /** Use div to replace TextArea or re-render TextArea */\n  renderTextarea?: ITextAreaProps['renderTextarea'];\n  /**\n   * Disable editing area code highlighting. The value is `false`, which increases the editing speed.\n   * @default true\n   */\n  highlightEnable?: boolean;\n  /**\n   * The number of characters to insert when pressing tab key.\n   * Default `2` spaces.\n   */\n  tabSize?: number;\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  commands?: ICommand[];\n  /**\n   * You can create your own commands or reuse existing commands.\n   */\n  extraCommands?: ICommand[];\n  /**\n   * Hide the tool bar\n   */\n  hideToolbar?: boolean;\n  /** Whether to enable scrolling */\n  enableScroll?: boolean;\n}\n\nfunction setGroupPopFalse(data: Record<string, boolean> = {}) {\n  Object.keys(data).forEach((keyname) => {\n    data[keyname] = false;\n  });\n  return data;\n}\n\nconst InternalMDEditor = (\n  props: MDEditorProps,\n  ref?: ((instance: ContextStore) => void) | React.RefObject<ContextStore> | null,\n) => {\n  const {\n    prefixCls = 'w-md-editor',\n    className,\n    value: propsValue,\n    commands = getCommands(),\n    extraCommands = getExtraCommands(),\n    height = 200,\n    toolbarHeight = 29,\n    enableScroll = true,\n    visiableDragbar = true,\n    highlightEnable = true,\n    preview: previewType = 'live',\n    fullscreen = false,\n    previewOptions = {},\n    textareaProps,\n    maxHeight = 1200,\n    minHeight = 100,\n    autoFocus,\n    tabSize = 2,\n    onChange,\n    hideToolbar,\n    renderTextarea,\n    ...other\n  } = props || {};\n  let [state, dispatch] = useReducer(reducer, {\n    markdown: propsValue,\n    preview: previewType,\n    height,\n    highlightEnable,\n    tabSize,\n    scrollTop: 0,\n    scrollTopPreview: 0,\n    commands,\n    extraCommands,\n    fullscreen,\n    onChange,\n    barPopup: {},\n  });\n  const container = useRef<HTMLDivElement>(null);\n  const previewRef = useRef<MarkdownPreviewRef>(null);\n  const enableScrollRef = useRef(enableScroll);\n\n  useImperativeHandle(ref, () => ({ ...state }));\n  useMemo(() => (enableScrollRef.current = enableScroll), [enableScroll]);\n  useEffect(() => {\n    const stateInit: ContextStore = {};\n    if (container.current) {\n      stateInit.container = container.current || undefined;\n    }\n    stateInit.markdown = propsValue || '';\n    stateInit.barPopup = {};\n    if (dispatch) {\n      dispatch({ ...state, ...stateInit });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const cls = [\n    className,\n    prefixCls,\n    state.preview ? `${prefixCls}-show-${state.preview}` : null,\n    state.fullscreen ? `${prefixCls}-fullscreen` : null,\n  ]\n    .filter(Boolean)\n    .join(' ')\n    .trim();\n\n  useMemo(\n    () => propsValue !== state.markdown && dispatch({ markdown: propsValue || '' }),\n    [propsValue, state.markdown],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => previewType !== state.preview && dispatch({ preview: previewType }), [previewType]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => height !== state.height && dispatch({ height: height }), [height]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => tabSize !== state.tabSize && dispatch({ tabSize }), [tabSize]);\n  useMemo(\n    () => highlightEnable !== state.highlightEnable && dispatch({ highlightEnable }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [highlightEnable],\n  );\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useMemo(() => autoFocus !== state.autoFocus && dispatch({ autoFocus: autoFocus }), [autoFocus]);\n  useMemo(\n    () => fullscreen !== state.fullscreen && dispatch({ fullscreen: fullscreen }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [fullscreen],\n  );\n\n  const textareaDomRef = useRef<HTMLDivElement>();\n  const active = useRef<'text' | 'preview'>('preview');\n  const initScroll = useRef(false);\n\n  useMemo(() => {\n    textareaDomRef.current = state.textareaWarp;\n    if (state.textareaWarp) {\n      state.textareaWarp.addEventListener('mouseover', () => {\n        active.current = 'text';\n      });\n      state.textareaWarp.addEventListener('mouseleave', () => {\n        active.current = 'preview';\n      });\n    }\n  }, [state.textareaWarp]);\n\n  const handleScroll = (e: React.UIEvent<HTMLDivElement>, type: 'text' | 'preview') => {\n    if (!enableScrollRef.current) return;\n    const textareaDom = textareaDomRef.current;\n    const previewDom = previewRef.current ? previewRef.current.mdp.current : undefined;\n    if (!initScroll.current) {\n      active.current = type;\n      initScroll.current = true;\n    }\n    if (textareaDom && previewDom) {\n      const scale =\n        (textareaDom.scrollHeight - textareaDom.offsetHeight) / (previewDom.scrollHeight - previewDom.offsetHeight);\n      if (e.target === textareaDom && active.current === 'text') {\n        previewDom.scrollTop = textareaDom.scrollTop / scale;\n      }\n      if (e.target === previewDom && active.current === 'preview') {\n        textareaDom.scrollTop = previewDom.scrollTop * scale;\n      }\n      let scrollTop = 0;\n      if (active.current === 'text') {\n        scrollTop = textareaDom.scrollTop || 0;\n      } else if (active.current === 'preview') {\n        scrollTop = previewDom.scrollTop || 0;\n      }\n      dispatch({ scrollTop });\n    }\n  };\n\n  return (\n    <EditorContext.Provider value={{ ...state, dispatch }}>\n      <div\n        ref={container}\n        className={cls}\n        {...other}\n        onClick={() => {\n          dispatch({ barPopup: { ...setGroupPopFalse(state.barPopup) } });\n        }}\n        style={{\n          ...other.style,\n          height: state.fullscreen ? '100%' : hideToolbar ? Number(state.height) - toolbarHeight : state.height,\n        }}\n      >\n        {!hideToolbar && <Toolbar prefixCls={prefixCls} height={toolbarHeight} />}\n        <div\n          className={`${prefixCls}-content`}\n          style={{\n            height: state.fullscreen ? `calc(100% - ${toolbarHeight}px)` : Number(state.height) - toolbarHeight,\n          }}\n        >\n          {/(edit|live)/.test(state.preview || '') && (\n            <TextArea\n              className={`${prefixCls}-input`}\n              prefixCls={prefixCls}\n              autoFocus={autoFocus}\n              {...textareaProps}\n              renderTextarea={renderTextarea}\n              onScroll={(e) => handleScroll(e, 'text')}\n            />\n          )}\n          {/(live|preview)/.test(state.preview || '') && (\n            <MarkdownPreview\n              {...(previewOptions as unknown)}\n              onScroll={(e) => handleScroll(e, 'preview')}\n              ref={previewRef}\n              source={state.markdown || ''}\n              className={`${prefixCls}-preview`}\n            />\n          )}\n        </div>\n        {visiableDragbar && !state.fullscreen && (\n          <DragBar\n            prefixCls={prefixCls}\n            height={state.height as number}\n            maxHeight={maxHeight!}\n            minHeight={minHeight!}\n            onChange={(newHeight) => {\n              dispatch({ height: newHeight });\n            }}\n          />\n        )}\n      </div>\n    </EditorContext.Provider>\n  );\n};\n\nconst mdEditor = React.forwardRef<ContextStore, MDEditorProps>(InternalMDEditor);\n\ntype MDEditor = typeof mdEditor & {\n  Markdown: typeof MarkdownPreview;\n};\n\n(mdEditor as MDEditor).Markdown = MarkdownPreview;\n\nexport default mdEditor as MDEditor;\n"
  ]
}