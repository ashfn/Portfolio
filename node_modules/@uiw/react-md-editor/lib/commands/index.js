"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

exports.__esModule = true;
exports.getStateFromTextArea = getStateFromTextArea;
exports.TextAreaTextApi = exports.TextAreaCommandOrchestrator = exports.getExtraCommands = exports.getCommands = void 0;

var _bold = require("./bold");

exports.bold = _bold.bold;

var _code = require("./code");

exports.code = _code.code;
exports.codeBlock = _code.codeBlock;

var _italic = require("./italic");

exports.italic = _italic.italic;

var _link = require("./link");

exports.link = _link.link;

var _list = require("./list");

exports.unorderedListCommand = _list.unorderedListCommand;
exports.orderedListCommand = _list.orderedListCommand;
exports.checkedListCommand = _list.checkedListCommand;

var _quote = require("./quote");

exports.quote = _quote.quote;

var _hr = require("./hr");

exports.hr = _hr.hr;

var _title = require("./title");

exports.title = _title.title;

var _title2 = require("./title1");

exports.title1 = _title2.title1;

var _title3 = require("./title2");

exports.title2 = _title3.title2;

var _title4 = require("./title3");

exports.title3 = _title4.title3;

var _title5 = require("./title4");

exports.title4 = _title5.title4;

var _title6 = require("./title5");

exports.title5 = _title6.title5;

var _title7 = require("./title6");

exports.title6 = _title7.title6;

var _comment = require("./comment");

var _group = require("./group");

exports.group = _group.group;

var _divider = require("./divider");

exports.divider = _divider.divider;

var _preview = require("./preview");

exports.codePreview = _preview.codePreview;
exports.codeEdit = _preview.codeEdit;
exports.codeLive = _preview.codeLive;

var _fullscreen = require("./fullscreen");

exports.fullscreen = _fullscreen.fullscreen;

var _image = require("./image");

exports.image = _image.image;

var _strikeThrough = require("./strikeThrough");

exports.strikethrough = _strikeThrough.strikethrough;

var _InsertTextAtPosition = _interopRequireDefault(require("../utils/InsertTextAtPosition"));

var getCommands = function getCommands() {
  return [_comment.comment, _bold.bold, _italic.italic, _strikeThrough.strikethrough, _hr.hr, _title.title, _divider.divider, _link.link, _quote.quote, _code.code, _code.codeBlock, _image.image, _divider.divider, _list.unorderedListCommand, _list.orderedListCommand, _list.checkedListCommand];
};

exports.getCommands = getCommands;

var getExtraCommands = function getExtraCommands() {
  return [_preview.codeEdit, _preview.codeLive, _preview.codePreview, _divider.divider, _fullscreen.fullscreen];
};

exports.getExtraCommands = getExtraCommands;

function getStateFromTextArea(textArea) {
  return {
    selection: {
      start: textArea.selectionStart,
      end: textArea.selectionEnd
    },
    text: textArea.value,
    selectedText: textArea.value.slice(textArea.selectionStart, textArea.selectionEnd)
  };
}

var TextAreaTextApi = /*#__PURE__*/function () {
  function TextAreaTextApi(textArea) {
    this.textArea = void 0;
    this.textArea = textArea;
  }
  /**
   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the
   * selection start and selection end will be the same and will both point to the end
   * @param text Text that should replace the current selection
   */


  var _proto = TextAreaTextApi.prototype;

  _proto.replaceSelection = function replaceSelection(text) {
    (0, _InsertTextAtPosition.default)(this.textArea, text);
    return getStateFromTextArea(this.textArea);
  }
  /**
   * Selects the specified text range
   * @param selection
   */
  ;

  _proto.setSelectionRange = function setSelectionRange(selection) {
    this.textArea.focus();
    this.textArea.selectionStart = selection.start;
    this.textArea.selectionEnd = selection.end;
    return getStateFromTextArea(this.textArea);
  };

  return TextAreaTextApi;
}();

exports.TextAreaTextApi = TextAreaTextApi;

var TextAreaCommandOrchestrator = /*#__PURE__*/function () {
  function TextAreaCommandOrchestrator(textArea) {
    this.textArea = void 0;
    this.textApi = void 0;
    this.textArea = textArea;
    this.textApi = new TextAreaTextApi(textArea);
  }

  var _proto2 = TextAreaCommandOrchestrator.prototype;

  _proto2.getState = function getState() {
    if (!this.textArea) return false;
    return getStateFromTextArea(this.textArea);
  };

  _proto2.executeCommand = function executeCommand(command, dispatch, state) {
    command.execute && command.execute(getStateFromTextArea(this.textArea), this.textApi, dispatch, state);
  };

  return TextAreaCommandOrchestrator;
}();

exports.TextAreaCommandOrchestrator = TextAreaCommandOrchestrator;
//# sourceMappingURL=index.js.map