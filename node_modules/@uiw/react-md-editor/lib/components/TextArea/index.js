"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;

exports.__esModule = true;
exports.default = TextArea;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _react = _interopRequireWildcard(require("react"));

var _Context = require("../../Context");

var _shortcuts = _interopRequireDefault(require("./shortcuts"));

var _Markdown = _interopRequireDefault(require("./Markdown"));

var _Textarea = _interopRequireDefault(require("./Textarea"));

var _commands = require("../../commands");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["prefixCls", "className", "onScroll", "renderTextarea"];

function TextArea(props) {
  var _ref = props || {},
      prefixCls = _ref.prefixCls,
      className = _ref.className,
      onScroll = _ref.onScroll,
      renderTextarea = _ref.renderTextarea,
      otherProps = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);

  var _useContext = (0, _react.useContext)(_Context.EditorContext),
      markdown = _useContext.markdown,
      scrollTop = _useContext.scrollTop,
      commands = _useContext.commands,
      extraCommands = _useContext.extraCommands,
      onChange = _useContext.onChange,
      dispatch = _useContext.dispatch;

  var textRef = _react.default.useRef(null);

  var executeRef = _react.default.useRef();

  var warp = /*#__PURE__*/_react.default.createRef();

  (0, _react.useEffect)(function () {
    var state = {};

    if (warp.current) {
      state.textareaWarp = warp.current || undefined;
      warp.current.scrollTop = scrollTop || 0;
    }

    if (dispatch) {
      dispatch((0, _extends2.default)({}, state));
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  (0, _react.useEffect)(function () {
    if (textRef.current && dispatch) {
      var _commandOrchestrator = new _commands.TextAreaCommandOrchestrator(textRef.current);

      executeRef.current = _commandOrchestrator;
      dispatch({
        textarea: textRef.current,
        commandOrchestrator: _commandOrchestrator
      });
    } // eslint-disable-next-line react-hooks/exhaustive-deps

  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    ref: warp,
    className: prefixCls + "-aree " + (className || ''),
    onScroll: onScroll,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: prefixCls + "-text",
      children: renderTextarea ? /*#__PURE__*/_react.default.cloneElement(renderTextarea((0, _extends2.default)({}, otherProps, {
        value: markdown,
        autoComplete: 'off',
        autoCorrect: 'off',
        spellCheck: 'false',
        autoCapitalize: 'off',
        className: prefixCls + "-text-input",
        style: {
          WebkitTextFillColor: 'inherit',
          overflow: 'auto'
        }
      }), {
        dispatch: dispatch,
        onChange: onChange,
        shortcuts: _shortcuts.default,
        useContext: {
          commands: commands,
          extraCommands: extraCommands,
          commandOrchestrator: executeRef.current
        }
      }), {
        ref: textRef
      }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_Markdown.default, {
          prefixCls: prefixCls
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_Textarea.default, (0, _extends2.default)({
          prefixCls: prefixCls
        }, otherProps))]
      })
    })
  });
}

module.exports = exports.default;
//# sourceMappingURL=index.js.map