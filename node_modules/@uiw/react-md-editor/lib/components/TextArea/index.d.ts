import React from 'react';
import { ContextStore, ExecuteCommandState } from '../../Context';
import { IProps } from '../../utils';
import { MDEditorProps } from '../../Editor';
import { TextAreaCommandOrchestrator, ICommand } from '../../commands';
import './index.less';
declare type RenderTextareaHandle = {
    dispatch: ContextStore['dispatch'];
    onChange?: MDEditorProps['onChange'];
    useContext?: {
        commands: ContextStore['commands'];
        extraCommands: ContextStore['extraCommands'];
        commandOrchestrator?: TextAreaCommandOrchestrator;
    };
    shortcuts?: (e: KeyboardEvent | React.KeyboardEvent<HTMLTextAreaElement>, commands: ICommand[], commandOrchestrator?: TextAreaCommandOrchestrator, dispatch?: React.Dispatch<ContextStore>, state?: ExecuteCommandState) => void;
};
export interface ITextAreaProps extends Omit<React.TextareaHTMLAttributes<HTMLTextAreaElement>, 'value' | 'onChange' | 'onScroll'>, IProps {
    value?: string;
    onScroll?: (e: React.UIEvent<HTMLDivElement>) => void;
    renderTextarea?: (props: React.TextareaHTMLAttributes<HTMLTextAreaElement> | React.HTMLAttributes<HTMLDivElement>, opts: RenderTextareaHandle) => JSX.Element;
}
export declare type TextAreaRef = {
    text?: HTMLTextAreaElement;
    warp?: HTMLDivElement;
};
export default function TextArea(props: ITextAreaProps): JSX.Element;
export {};
