"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Check if parameter it align types.
 *
 * @param parameter - The parameter to test.
 * @returns True if align types.
 */
function isAlignTypes(parameter) {
    return (Array.isArray(parameter) &&
        parameter.every((item) => item === null || typeof item === 'string'));
}
/* eslint-enable @typescript-eslint/unified-signatures */
/*
 * Implementation.
 */
function createTable(alignOrChildrenOrOptions, children) {
    let options;
    if (alignOrChildrenOrOptions === undefined) {
        options = { children: [] };
    }
    else if (isAlignTypes(alignOrChildrenOrOptions)) {
        options = { align: alignOrChildrenOrOptions, children: [] };
    }
    else if (Array.isArray(alignOrChildrenOrOptions)) {
        options = { children: alignOrChildrenOrOptions };
    }
    else {
        options = { ...alignOrChildrenOrOptions, children: [] };
    }
    if (children) {
        options.children = children;
    }
    return { type: 'table', ...options };
}
exports.createTable = createTable;
/**
 * Type guard for Table.
 *
 * @param node - The node to test.
 * @returns True if node is Table.
 */
function isTable(node) {
    return node.type === 'table';
}
exports.isTable = isTable;
/**
 * Type assertion for Table.
 *
 * @param node - The node to test.
 */
function assertTable(node) {
    if (!isTable(node)) {
        throw new Error('Node is not a Table');
    }
}
exports.assertTable = assertTable;
//# sourceMappingURL=Table.js.map