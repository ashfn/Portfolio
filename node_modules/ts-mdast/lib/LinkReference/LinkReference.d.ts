import { LinkReference, ReferenceType, StaticPhrasingContent } from 'mdast';
import { Node } from 'unist';
interface Options {
    label?: string;
}
/**
 * @param identifier - The reference identifier.
 * @param referenceType - The reference type.
 * @param label - The original value of the normalized identifier field.
 * @param children - The children of the link reference.
 * @returns The link reference.
 */
export declare function createLinkReference(identifier: string, referenceType: ReferenceType, label: string, children?: StaticPhrasingContent[]): LinkReference;
/**
 * @param identifier - The reference identifier.
 * @param referenceType - The reference type.
 * @param children - The children of the link reference.
 * @returns The link reference.
 */
export declare function createLinkReference(identifier: string, referenceType: ReferenceType, children?: StaticPhrasingContent[]): LinkReference;
/**
 * @param identifier - The reference identifier.
 * @param referenceType - The reference type.
 * @param options - The options of the link reference.
 * @param children - The children of the link reference.
 * @returns The link reference.
 */
export declare function createLinkReference(identifier: string, referenceType: ReferenceType, options: Options, children?: StaticPhrasingContent[]): LinkReference;
/**
 * Type guard for LinkReference.
 *
 * @param node - The node to test.
 * @returns True if node is LinkReference.
 */
export declare function isLinkReference(node: Node): node is LinkReference;
/**
 * Type assertion for LinkReference.
 *
 * @param node - The node to test.
 */
export declare function assertLinkReference(node: Node): asserts node is LinkReference;
export {};
