import { List, ListContent } from 'mdast';
import { Node } from 'unist';
interface Options {
    ordered?: boolean;
    start?: number;
    spread?: boolean;
}
/**
 * @param ordered - The items have been intentionally ordered (true), or the order is not important (false
 * or not present).
 * @param start - When the ordered field is true, the starting number of the list.
 * @param spread - One or more of its children are separated with a blank line from its siblings (true), or
 * not (false or not present).
 * @param children - The children of the list.
 * @returns The list.
 */
export declare function createList(ordered: boolean, start: number, spread: boolean, children?: ListContent[]): List;
/**
 * @param ordered - The items have been intentionally ordered (true), or the order is not important (false
 * or not present).
 * @param start - When the ordered field is true, the starting number of the list.
 * @param children - The children of the list.
 * @returns The list.
 */
export declare function createList(ordered: boolean, start: number, children?: ListContent[]): List;
/**
 * @param ordered - The items have been intentionally ordered (true), or the order is not important (false
 * or not present).
 * @param children - The children of the list.
 * @returns The list.
 */
export declare function createList(ordered: boolean, children?: ListContent[]): List;
/**
 * @param children - The children of the list.
 * @returns The list.
 */
export declare function createList(children?: ListContent[]): List;
/**
 * @param options - The options of the list.
 * @param children - The children of the list.
 * @returns The list.
 */
export declare function createList(options: Options, children?: ListContent[]): List;
/**
 * Type guard for List.
 *
 * @param node - The node to test.
 * @returns True if node is List.
 */
export declare function isList(node: Node): node is List;
/**
 * Type assertion for List.
 *
 * @param node - The node to test.
 */
export declare function assertList(node: Node): asserts node is List;
export {};
