import { ApolloClient } from '@apollo/client';
import { GetServerSideProps, NextApiResponse, NextApiRequest } from 'next';
import { Editor } from '@tiptap/react';
import * as react from 'react';
import { Dispatch, SetStateAction } from 'react';
import { Session as Session$1 } from 'next-session/lib/types';

declare type Document = {
    author: {
        name?: string;
        picture?: string;
    };
    title: string;
    publishedAt: Date;
    content: string;
    status: 'published' | 'draft';
    slug: string;
    description?: string;
    coverImage?: string;
};
declare type FileType = {
    type: 'images';
    blob?: string;
    filename: string;
    content: string;
};
declare type PostContextType = {
    editor: Editor;
    post: Document;
    editPost: (property: string, value: any) => void;
    files: FileType[];
    setFiles: Dispatch<SetStateAction<FileType[]>>;
    hasChanges: boolean;
    collection: string;
};
declare type Session = {
    user: {
        name: string;
        login: string;
        email: string;
        image: string;
    };
    access_token: string;
    expires: Date;
};
declare type Collection = {
    name: string;
};

declare type EnvVarsType = {
    required: {
        [key: string]: boolean;
    };
    optional: {
        [key: string]: boolean;
    };
};

declare type OutstaticProps = {
    missingEnvVars: EnvVarsType | false;
    providerData: {
        client: ApolloClient<any>;
        repoOwner: string;
        repoSlug: string;
        contentPath: string;
        monorepoPath: string;
        session: Session | null;
        initialApolloState?: null;
        collections: string[];
        pages: string[];
    };
};
declare const Outstatic: ({ missingEnvVars, providerData }: OutstaticProps) => JSX.Element;
declare const OstSSP: GetServerSideProps;

interface Request extends NextApiRequest {
    session: Session$1;
}
declare const OutstaticApi: (req: Request, res: NextApiResponse) => Promise<void>;

declare type OutstaticProviderProps = {
    children?: React.ReactNode;
    repoOwner: string;
    repoSlug: string;
    contentPath: string;
    monorepoPath: string;
    session: Session | null;
    initialApolloState?: null;
    collections: string[];
    pages: string[];
    addPage: (page: string) => void;
    removePage: (page: string) => void;
};
declare const OutstaticContext: react.Context<Omit<OutstaticProviderProps, "client">>;
declare const OutstaticProvider: ({ children, repoOwner, repoSlug, contentPath, monorepoPath, session, collections, pages, addPage, removePage }: OutstaticProviderProps) => JSX.Element;
declare const PostContext: react.Context<PostContextType>;

export { Collection, Document, FileType, OstSSP, Outstatic, OutstaticApi, OutstaticContext, OutstaticProvider, PostContext, PostContextType, Session };
