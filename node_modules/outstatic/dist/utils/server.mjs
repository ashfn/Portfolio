// src/utils/server.ts
import fs from "fs";
import { join } from "path";
import matter from "gray-matter";
var CONTENT_PATH = join(
  process.cwd(),
  process.env.OST_CONTENT_PATH || "outstatic/content"
);
function getDocumentSlugs(collection) {
  const collectionsPath = join(CONTENT_PATH, collection);
  return fs.readdirSync(collectionsPath);
}
function getDocumentBySlug(collection, slug, fields = []) {
  const realSlug = slug.replace(/\.mdx?$/, "");
  const collectionsPath = join(CONTENT_PATH, collection);
  const fullPath = join(collectionsPath, `${realSlug}.md`);
  const fileContents = fs.readFileSync(fullPath, "utf8");
  const { data, content } = matter(fileContents);
  const items = {};
  if (data["status"] === "draft") {
    return {};
  }
  fields.forEach((field) => {
    if (field === "slug") {
      items[field] = realSlug;
    }
    if (field === "content") {
      items[field] = content;
    }
    if (typeof data[field] !== "undefined") {
      items[field] = data[field];
    }
  });
  return items;
}
function getDocuments(collection, fields = []) {
  const slugs = getDocumentSlugs(collection);
  const posts = slugs.map(
    (slug) => getDocumentBySlug(collection, slug, [...fields, "publishedAt", "status"])
  ).filter((post) => post.status === "published").sort((post1, post2) => post1.publishedAt > post2.publishedAt ? -1 : 1);
  return posts;
}
var getDocumentPaths = (collection) => {
  const documentFilePaths = fs.readdirSync(CONTENT_PATH + "/" + collection).filter((path) => /\.mdx?$/.test(path));
  const publishedPaths = documentFilePaths.filter((path) => {
    const collectionsPath = join(CONTENT_PATH, collection);
    const fullPath = join(collectionsPath, `${path}`);
    const fileContents = fs.readFileSync(fullPath, "utf8");
    const { data } = matter(fileContents);
    return data["status"] === "published";
  });
  const paths = publishedPaths.map((path) => path.replace(/\.mdx?$/, "")).map((slug) => ({ params: { slug } }));
  return paths;
};
var getCollections = () => {
  const collections = fs.readdirSync(CONTENT_PATH);
  return collections;
};
export {
  getCollections,
  getDocumentBySlug,
  getDocumentPaths,
  getDocumentSlugs,
  getDocuments
};
