"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/server.ts
var server_exports = {};
__export(server_exports, {
  getCollections: () => getCollections,
  getDocumentBySlug: () => getDocumentBySlug,
  getDocumentPaths: () => getDocumentPaths,
  getDocumentSlugs: () => getDocumentSlugs,
  getDocuments: () => getDocuments
});
module.exports = __toCommonJS(server_exports);
var import_fs = __toESM(require("fs"));
var import_path = require("path");
var import_gray_matter = __toESM(require("gray-matter"));
var CONTENT_PATH = (0, import_path.join)(
  process.cwd(),
  process.env.OST_CONTENT_PATH || "outstatic/content"
);
function getDocumentSlugs(collection) {
  const collectionsPath = (0, import_path.join)(CONTENT_PATH, collection);
  return import_fs.default.readdirSync(collectionsPath);
}
function getDocumentBySlug(collection, slug, fields = []) {
  const realSlug = slug.replace(/\.mdx?$/, "");
  const collectionsPath = (0, import_path.join)(CONTENT_PATH, collection);
  const fullPath = (0, import_path.join)(collectionsPath, `${realSlug}.md`);
  const fileContents = import_fs.default.readFileSync(fullPath, "utf8");
  const { data, content } = (0, import_gray_matter.default)(fileContents);
  const items = {};
  if (data["status"] === "draft") {
    return {};
  }
  fields.forEach((field) => {
    if (field === "slug") {
      items[field] = realSlug;
    }
    if (field === "content") {
      items[field] = content;
    }
    if (typeof data[field] !== "undefined") {
      items[field] = data[field];
    }
  });
  return items;
}
function getDocuments(collection, fields = []) {
  const slugs = getDocumentSlugs(collection);
  const posts = slugs.map(
    (slug) => getDocumentBySlug(collection, slug, [...fields, "publishedAt", "status"])
  ).filter((post) => post.status === "published").sort((post1, post2) => post1.publishedAt > post2.publishedAt ? -1 : 1);
  return posts;
}
var getDocumentPaths = (collection) => {
  const documentFilePaths = import_fs.default.readdirSync(CONTENT_PATH + "/" + collection).filter((path) => /\.mdx?$/.test(path));
  const publishedPaths = documentFilePaths.filter((path) => {
    const collectionsPath = (0, import_path.join)(CONTENT_PATH, collection);
    const fullPath = (0, import_path.join)(collectionsPath, `${path}`);
    const fileContents = import_fs.default.readFileSync(fullPath, "utf8");
    const { data } = (0, import_gray_matter.default)(fileContents);
    return data["status"] === "published";
  });
  const paths = publishedPaths.map((path) => path.replace(/\.mdx?$/, "")).map((slug) => ({ params: { slug } }));
  return paths;
};
var getCollections = () => {
  const collections = import_fs.default.readdirSync(CONTENT_PATH);
  return collections;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCollections,
  getDocumentBySlug,
  getDocumentPaths,
  getDocumentSlugs,
  getDocuments
});
